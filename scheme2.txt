;;; Test Cases for the Scheme Project 

;; To run all tests:
;;     python3 scheme_test.py tests.scm
;;


;; The following should work for the initial files.

3
; expect 3

-123
; expect -123

1.25
; expect 1.25

#t
; expect #t

#f
; expect #f

)
; expect Error

;; In the following sections, you should provide test cases, so that by 
;; running 
;;     python3 scheme_test.py tests.scm
;; you can test the portions of the project you've completed.  In fact, 
;; you might consider writing these tests BEFORE tackling the associated
;; problem!

; Problem 1  (the reader)
;   Initially, the project skeleton simply reads and prints the expressions
;   entered.  Later on, it starts evaluating them.  You may therefore need
;   to modify the tests you initially provide for this section when you get
;   to later sections.  For example, initially, entering the symbol x will
;   simply cause the evaluator to print "x" rather than attempting to evaluate
;   it (and getting an error).  Therefore, you may later have to modify
;   x to (e.g.) 'x

1
; expect 1

'x
; expect x

'(1 2)
; expect (1 2)

'(1 2 . 3)
; expect (1 2 . 3)

; Problem A2 and B2 (symbol evaluation and simple defines)

(define x 1)

x
; expect 1


; Problem 3 (primitive function calls)

(+ 4  3)
; expect 7

(+ 1 2 3)
; expect 6

(/ 1 0)
; expect Error: cannot divide by zero

(+ x 1)
; expect 2


; Problem A4, B4, A5, B5, and 6 (calls on user-defined functions)

(define (g val) val)
(g 6)
; expect 6

(define f (lambda (x) (+ x 3)))

(f 3)
; expect 6

(define z 3)
(define (foo x) (set! z x) (* z x))
(foo 3)
; expect 9

(define (func x)
  (define (growy x y)
    (+ x y))
  (growy x 7))
(func 3)
; expect 10

; Problem 7 (set!)

(define t 7)

t
; expect 7

(set! t 49)

t
; expect 49

; Problem A8 (if, and)

(if (< 1 2) 'yes 'no)
; expect yes

(if (> 1 2) 'yes 'no)
; expect no

(and #t #f)
; expect #f

(and 1 2 3 4)
; expect 4


; Problem B8 (cond, or)

(cond ((> 3 2) 'greater)
      ((< 3 2) 'less))
; expect greater

(cond ((> 3 3) 'greater)
      ((< 3 3) 'less)
      (else 'equal))
; expect equal

(or #t #f)
; expect #t

(or 1 2)
; expect 1

; Problem 9 (let)

(define add4
  (let ((x 4)) (lambda (y) (+ x y))))
(add4 3)
; expect 7

(let ((x 5)) x)
; expect 5

(let ((x (+ 1 2))) x)
; expect 3

(define mul_bind
  (let ((x 2) (y 3)) (lambda (z) (+ x y z))))
(mul_bind 5)
; expect 10

; Extra Credit 1 (let*)

; YOUR TEST CASES HERE


; Extra Credit 2 (case)

; YOUR TEST CASES HERE


; Problem A10

;; The subsequence of list S for which F outputs a true value (i.e., one
;; other than #f), computed destructively
(define (filter! f s)
   (define (fhelper s)
     (cond ((null? (cdr s)) s)
	   ((f (cadr s)) (fhelper  (cdr s)))
	   (else (begin (set-cdr! s (cddr s)) (fhelper s)))
	   )
     )
   (if (f (car s)) (begin (fhelper s) s) (filter! f (cdr s)))
)

(define (big x) (> x 5))

(define ints (list 1 10 3 8 4 7))
(define ints1 (cdr ints))

(define filtered-ints (filter! big ints))
filtered-ints
; expect (10 8 7)
(eq? filtered-ints ints1)
; expect #t

; Problem A11.

;; The number of ways to change TOTAL with DENOMS
;; At most MAX-COINS total coins can be used.
(define (count-change total denoms max-coins)
  (cond ((= total 0) 1)
	((= max-coins 0) 0)
	((null? denoms) 0)
	((>= total (car denoms)) (+ (count-change total (cdr denoms) max-coins)
				    (count-change (- total (car denoms)) denoms (- max-coins 1))))
	(else (count-change total (cdr denoms) max-coins)))
)

(define us-coins '(50 25 10 5 1))
(count-change 20 us-coins 18)
; expect 8

; Problem B10

;; Reverse list L destructively, creating no new pairs.  May modify the 
;; cdrs of the items in list L.
(define (reverse! L)
  (define (rhelper L sofar)
    (if (null? L) sofar
	(let ((next (cdr L)))
	  (begin (set-cdr! L sofar)
	  (rhelper next L)))))
    (rhelper L '())
)

(define L (list 1 2 3 4))
(define LR (reverse! L))
LR
; expect (4 3 2 1)

(eq? L (list-tail LR 3))
; expect #t

; Problem B11

;; The number of ways to partition TOTAL, where 
;; each partition must be at most MAX-VALUE
(define (count-partitions total max-value)
     (cond ((< total 0) 0)
        ((<= max-value 0) 0)
        ((= total 0) 1)
        (else (+ (count-partitions (- total max-value) max-value)
          (count-partitions total (- max-value 1))))
))
(count-partitions 5 3)
; expect 5
; Note: The 5 partitions are [[3 2] [3 1 1] [2 2 1] [2 1 1 1] [1 1 1 1 1]]

; Problem 12

;; A list of all ways to partition TOTAL, where  each partition must 
;; be at most MAX-VALUE and there are at most MAX-PIECES partitions.
(define (list-partitions total max-pieces max-value)
   (define (helper total max-pieces max-value partitions sofar)
    (cond ((negative? max-pieces) partitions)
          ((= total 0) (cons sofar partitions))
          ((<= max-value 0) partitions)
          (else (append (helper (- total max-value) (- max-pieces 1) max-value partitions (append sofar (list max-value))) (helper total max-pieces (- max-value 1) partitions sofar)))))
  (helper total max-pieces max-value '() '())
)

(list-partitions 5 2 4)
; expect ((4 1) (3 2))
(list-partitions 7 3 5)
; expect ((5 2) (5 1 1) (4 3) (4 2 1) (3 3 1) (3 2 2))